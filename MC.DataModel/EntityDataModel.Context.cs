//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace MC.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WebApiDbEntities : DbContext
    {
        public WebApiDbEntities()
            : base("name=WebApiDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cities> Cities { get; set; }
        public virtual DbSet<ComboEntries> ComboEntries { get; set; }
        public virtual DbSet<ComboIds> ComboIds { get; set; }
        public virtual DbSet<Counties> Counties { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<sysMenu> sysMenu { get; set; }
        public virtual DbSet<UserId> UserId { get; set; }
        public virtual DbSet<ZipCodes> ZipCodes { get; set; }
        public virtual DbSet<Notes> Notes { get; set; }
        public virtual DbSet<EmailType> EmailType { get; set; }
        public virtual DbSet<BundleDetails> BundleDetails { get; set; }
        public virtual DbSet<Bundles> Bundles { get; set; }
        public virtual DbSet<ClientBundles> ClientBundles { get; set; }
        public virtual DbSet<OrderClientContacts> OrderClientContacts { get; set; }
        public virtual DbSet<OrderDetails> OrderDetails { get; set; }
        public virtual DbSet<OrderNotes> OrderNotes { get; set; }
        public virtual DbSet<Addresses> Addresses { get; set; }
        public virtual DbSet<Documents> Documents { get; set; }
        public virtual DbSet<Borrowers> Borrowers { get; set; }
        public virtual DbSet<WebRoles> WebRoles { get; set; }
        public virtual DbSet<States> States { get; set; }
        public virtual DbSet<OrderMaster> OrderMaster { get; set; }
        public virtual DbSet<SecurityControl> SecurityControl { get; set; }
        public virtual DbSet<SecurityForm> SecurityForm { get; set; }
        public virtual DbSet<SecurityFormControl> SecurityFormControl { get; set; }
        public virtual DbSet<SecurityFormControlConfig> SecurityFormControlConfig { get; set; }
    
        public virtual ObjectResult<BusinessRuleSelectAllByCategoryName_Result> BusinessRuleSelectAllByCategoryName(string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BusinessRuleSelectAllByCategoryName_Result>("BusinessRuleSelectAllByCategoryName", categoryNameParameter);
        }
    
        public virtual ObjectResult<ContactsSelectType_Result> ContactsSelectType(Nullable<int> xRefID, string suffix)
        {
            var xRefIDParameter = xRefID.HasValue ?
                new ObjectParameter("XRefID", xRefID) :
                new ObjectParameter("XRefID", typeof(int));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactsSelectType_Result>("ContactsSelectType", xRefIDParameter, suffixParameter);
        }
    
        public virtual ObjectResult<DocumentTypesSelectAllByProdCat_Result> DocumentTypesSelectAllByProdCat(string productCategory, Nullable<bool> isAvailableExternal)
        {
            var productCategoryParameter = productCategory != null ?
                new ObjectParameter("ProductCategory", productCategory) :
                new ObjectParameter("ProductCategory", typeof(string));
    
            var isAvailableExternalParameter = isAvailableExternal.HasValue ?
                new ObjectParameter("IsAvailableExternal", isAvailableExternal) :
                new ObjectParameter("IsAvailableExternal", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentTypesSelectAllByProdCat_Result>("DocumentTypesSelectAllByProdCat", productCategoryParameter, isAvailableExternalParameter);
        }
    
        public virtual ObjectResult<GetStateCountyFromZip_Result> GetStateCountyFromZip(string zipcode)
        {
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStateCountyFromZip_Result>("GetStateCountyFromZip", zipcodeParameter);
        }
    
        public virtual int DocumentsInsert(Nullable<int> iD1, Nullable<int> iD2, string docType, string docPath, string description, string discRefNo, Nullable<bool> clientViewable, string docSource, string enteredBy, Nullable<System.DateTime> enteredDate, Nullable<int> eventID, Nullable<bool> vendorViewable, Nullable<bool> borrowerViewable, Nullable<int> docTypeID, string documentFolder, string uidHUDLine, string uidDisbursement, Nullable<bool> lockOtherDocs, string s3KeyName, Nullable<int> tCD_RowId, ObjectParameter rowId, Nullable<int> disbursementId)
        {
            var iD1Parameter = iD1.HasValue ?
                new ObjectParameter("ID1", iD1) :
                new ObjectParameter("ID1", typeof(int));
    
            var iD2Parameter = iD2.HasValue ?
                new ObjectParameter("ID2", iD2) :
                new ObjectParameter("ID2", typeof(int));
    
            var docTypeParameter = docType != null ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(string));
    
            var docPathParameter = docPath != null ?
                new ObjectParameter("DocPath", docPath) :
                new ObjectParameter("DocPath", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var discRefNoParameter = discRefNo != null ?
                new ObjectParameter("DiscRefNo", discRefNo) :
                new ObjectParameter("DiscRefNo", typeof(string));
    
            var clientViewableParameter = clientViewable.HasValue ?
                new ObjectParameter("ClientViewable", clientViewable) :
                new ObjectParameter("ClientViewable", typeof(bool));
    
            var docSourceParameter = docSource != null ?
                new ObjectParameter("DocSource", docSource) :
                new ObjectParameter("DocSource", typeof(string));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var enteredDateParameter = enteredDate.HasValue ?
                new ObjectParameter("EnteredDate", enteredDate) :
                new ObjectParameter("EnteredDate", typeof(System.DateTime));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var vendorViewableParameter = vendorViewable.HasValue ?
                new ObjectParameter("VendorViewable", vendorViewable) :
                new ObjectParameter("VendorViewable", typeof(bool));
    
            var borrowerViewableParameter = borrowerViewable.HasValue ?
                new ObjectParameter("BorrowerViewable", borrowerViewable) :
                new ObjectParameter("BorrowerViewable", typeof(bool));
    
            var docTypeIDParameter = docTypeID.HasValue ?
                new ObjectParameter("DocTypeID", docTypeID) :
                new ObjectParameter("DocTypeID", typeof(int));
    
            var documentFolderParameter = documentFolder != null ?
                new ObjectParameter("DocumentFolder", documentFolder) :
                new ObjectParameter("DocumentFolder", typeof(string));
    
            var uidHUDLineParameter = uidHUDLine != null ?
                new ObjectParameter("uidHUDLine", uidHUDLine) :
                new ObjectParameter("uidHUDLine", typeof(string));
    
            var uidDisbursementParameter = uidDisbursement != null ?
                new ObjectParameter("uidDisbursement", uidDisbursement) :
                new ObjectParameter("uidDisbursement", typeof(string));
    
            var lockOtherDocsParameter = lockOtherDocs.HasValue ?
                new ObjectParameter("LockOtherDocs", lockOtherDocs) :
                new ObjectParameter("LockOtherDocs", typeof(bool));
    
            var s3KeyNameParameter = s3KeyName != null ?
                new ObjectParameter("S3KeyName", s3KeyName) :
                new ObjectParameter("S3KeyName", typeof(string));
    
            var tCD_RowIdParameter = tCD_RowId.HasValue ?
                new ObjectParameter("TCD_RowId", tCD_RowId) :
                new ObjectParameter("TCD_RowId", typeof(int));
    
            var disbursementIdParameter = disbursementId.HasValue ?
                new ObjectParameter("DisbursementId", disbursementId) :
                new ObjectParameter("DisbursementId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentsInsert", iD1Parameter, iD2Parameter, docTypeParameter, docPathParameter, descriptionParameter, discRefNoParameter, clientViewableParameter, docSourceParameter, enteredByParameter, enteredDateParameter, eventIDParameter, vendorViewableParameter, borrowerViewableParameter, docTypeIDParameter, documentFolderParameter, uidHUDLineParameter, uidDisbursementParameter, lockOtherDocsParameter, s3KeyNameParameter, tCD_RowIdParameter, rowId, disbursementIdParameter);
        }
    
        public virtual ObjectResult<GetAssociateCertification_Result> GetAssociateCertification(Nullable<int> contactId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssociateCertification_Result>("GetAssociateCertification", contactIdParameter);
        }
    
        public virtual int AddressesDelete(Nullable<int> addressId)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddressesDelete", addressIdParameter);
        }
    
        public virtual int DeactivateAreaTypeForVendor(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivateAreaTypeForVendor", vendorIDParameter);
        }
    
        public virtual int ImagingSystemSelect(ObjectParameter iD, ObjectParameter name, ObjectParameter displayName, ObjectParameter path, ObjectParameter uRL)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImagingSystemSelect", iD, name, displayName, path, uRL);
        }
    
        public virtual int DelaySeveritySelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelaySeveritySelectAll");
        }
    
        public virtual ObjectResult<FeedbackPartySelectAll_Result> FeedbackPartySelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FeedbackPartySelectAll_Result>("FeedbackPartySelectAll");
        }
    
        public virtual int SearchVendorNotes(Nullable<int> xRefId, string noteType, Nullable<bool> clientViewable, Nullable<bool> vendorViewable)
        {
            var xRefIdParameter = xRefId.HasValue ?
                new ObjectParameter("XRefId", xRefId) :
                new ObjectParameter("XRefId", typeof(int));
    
            var noteTypeParameter = noteType != null ?
                new ObjectParameter("NoteType", noteType) :
                new ObjectParameter("NoteType", typeof(string));
    
            var clientViewableParameter = clientViewable.HasValue ?
                new ObjectParameter("ClientViewable", clientViewable) :
                new ObjectParameter("ClientViewable", typeof(bool));
    
            var vendorViewableParameter = vendorViewable.HasValue ?
                new ObjectParameter("VendorViewable", vendorViewable) :
                new ObjectParameter("VendorViewable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchVendorNotes", xRefIdParameter, noteTypeParameter, clientViewableParameter, vendorViewableParameter);
        }
    
        public virtual ObjectResult<GetExpirationDetail_Result> GetExpirationDetail(string assignedUser, string followUpDate, string expirationDate, string state, string vendorType, string currentDate, string thresholdDate, string highAlertExpiration)
        {
            var assignedUserParameter = assignedUser != null ?
                new ObjectParameter("AssignedUser", assignedUser) :
                new ObjectParameter("AssignedUser", typeof(string));
    
            var followUpDateParameter = followUpDate != null ?
                new ObjectParameter("FollowUpDate", followUpDate) :
                new ObjectParameter("FollowUpDate", typeof(string));
    
            var expirationDateParameter = expirationDate != null ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var vendorTypeParameter = vendorType != null ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(string));
    
            var currentDateParameter = currentDate != null ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(string));
    
            var thresholdDateParameter = thresholdDate != null ?
                new ObjectParameter("ThresholdDate", thresholdDate) :
                new ObjectParameter("ThresholdDate", typeof(string));
    
            var highAlertExpirationParameter = highAlertExpiration != null ?
                new ObjectParameter("HighAlertExpiration", highAlertExpiration) :
                new ObjectParameter("HighAlertExpiration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExpirationDetail_Result>("GetExpirationDetail", assignedUserParameter, followUpDateParameter, expirationDateParameter, stateParameter, vendorTypeParameter, currentDateParameter, thresholdDateParameter, highAlertExpirationParameter);
        }
    
        public virtual ObjectResult<GetInternalContacts_Result> GetInternalContacts(Nullable<int> orderNo, Nullable<int> itemNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var itemNoParameter = itemNo.HasValue ?
                new ObjectParameter("ItemNo", itemNo) :
                new ObjectParameter("ItemNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInternalContacts_Result>("GetInternalContacts", orderNoParameter, itemNoParameter);
        }
    
        public virtual int DocumentsDelete(Nullable<int> rowID, string userId)
        {
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentsDelete", rowIDParameter, userIdParameter);
        }
    
        public virtual int DocumentsLock(Nullable<int> rowId, Nullable<bool> isLocked, string lockedBy)
        {
            var rowIdParameter = rowId.HasValue ?
                new ObjectParameter("RowId", rowId) :
                new ObjectParameter("RowId", typeof(int));
    
            var isLockedParameter = isLocked.HasValue ?
                new ObjectParameter("IsLocked", isLocked) :
                new ObjectParameter("IsLocked", typeof(bool));
    
            var lockedByParameter = lockedBy != null ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentsLock", rowIdParameter, isLockedParameter, lockedByParameter);
        }
    
        public virtual int DeleteVendorCountyFees(Nullable<int> vendorCountyFeesId)
        {
            var vendorCountyFeesIdParameter = vendorCountyFeesId.HasValue ?
                new ObjectParameter("vendorCountyFeesId", vendorCountyFeesId) :
                new ObjectParameter("vendorCountyFeesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVendorCountyFees", vendorCountyFeesIdParameter);
        }
    
        public virtual ObjectResult<GetChildLvlClients_Result> GetChildLvlClients(Nullable<int> vendorID, string xml)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChildLvlClients_Result>("GetChildLvlClients", vendorIDParameter, xmlParameter);
        }
    
        public virtual ObjectResult<GetCompanyGroupCodes_Result> GetCompanyGroupCodes(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyGroupCodes_Result>("GetCompanyGroupCodes", vendorIdParameter);
        }
    
        public virtual ObjectResult<GetParentClients_Result> GetParentClients(Nullable<int> vendorID, string companyGroupCode)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var companyGroupCodeParameter = companyGroupCode != null ?
                new ObjectParameter("CompanyGroupCode", companyGroupCode) :
                new ObjectParameter("CompanyGroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetParentClients_Result>("GetParentClients", vendorIDParameter, companyGroupCodeParameter);
        }
    
        public virtual int GetRPClientsByTransId(Nullable<int> vendorID, string transId)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var transIdParameter = transId != null ?
                new ObjectParameter("transId", transId) :
                new ObjectParameter("transId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRPClientsByTransId", vendorIDParameter, transIdParameter);
        }
    
        public virtual int GetRPClientsParentsByTransId(Nullable<int> vendorID, string transId)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var transIdParameter = transId != null ?
                new ObjectParameter("transId", transId) :
                new ObjectParameter("transId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRPClientsParentsByTransId", vendorIDParameter, transIdParameter);
        }
    
        public virtual int DeleteCPRClientsByParentsIds(Nullable<int> vendorID, string xml)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCPRClientsByParentsIds", vendorIDParameter, xmlParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetRPClientsByParentId(Nullable<int> vendorID, string xml)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetRPClientsByParentId", vendorIDParameter, xmlParameter);
        }
    
        public virtual int DeleteClientRestrictionsByCompanyGroupCode(Nullable<int> vendorID, string cGC)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var cGCParameter = cGC != null ?
                new ObjectParameter("CGC", cGC) :
                new ObjectParameter("CGC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClientRestrictionsByCompanyGroupCode", vendorIDParameter, cGCParameter);
        }
    
        public virtual int DeleteClientRestrictionsByTransId(Nullable<int> vendorID, string transId)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var transIdParameter = transId != null ?
                new ObjectParameter("TransId", transId) :
                new ObjectParameter("TransId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClientRestrictionsByTransId", vendorIDParameter, transIdParameter);
        }
    
        public virtual int DeleteCPRClientsByIds(Nullable<int> vendorID, string xml)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCPRClientsByIds", vendorIDParameter, xmlParameter);
        }
    
        public virtual int InterfaceInsertRequest(Nullable<int> interfaceTransactionType, string parameter1, string parameter2, string parameter3, string parameter4, string parameter5)
        {
            var interfaceTransactionTypeParameter = interfaceTransactionType.HasValue ?
                new ObjectParameter("InterfaceTransactionType", interfaceTransactionType) :
                new ObjectParameter("InterfaceTransactionType", typeof(int));
    
            var parameter1Parameter = parameter1 != null ?
                new ObjectParameter("Parameter1", parameter1) :
                new ObjectParameter("Parameter1", typeof(string));
    
            var parameter2Parameter = parameter2 != null ?
                new ObjectParameter("Parameter2", parameter2) :
                new ObjectParameter("Parameter2", typeof(string));
    
            var parameter3Parameter = parameter3 != null ?
                new ObjectParameter("Parameter3", parameter3) :
                new ObjectParameter("Parameter3", typeof(string));
    
            var parameter4Parameter = parameter4 != null ?
                new ObjectParameter("Parameter4", parameter4) :
                new ObjectParameter("Parameter4", typeof(string));
    
            var parameter5Parameter = parameter5 != null ?
                new ObjectParameter("Parameter5", parameter5) :
                new ObjectParameter("Parameter5", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InterfaceInsertRequest", interfaceTransactionTypeParameter, parameter1Parameter, parameter2Parameter, parameter3Parameter, parameter4Parameter, parameter5Parameter);
        }
    
        public virtual int PasswordResetGetThemeUrl(Nullable<int> contactId, ObjectParameter resetUrl)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PasswordResetGetThemeUrl", contactIdParameter, resetUrl);
        }
    
        public virtual ObjectResult<ClientBundlesSelectOE_Result> ClientBundlesSelectOE(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientBundlesSelectOE_Result>("ClientBundlesSelectOE", clientIDParameter);
        }
    
        public virtual ObjectResult<ContactsSelectAll_Result> ContactsSelectAll(Nullable<int> xRefID, string suffix, Nullable<bool> showMultiLevels)
        {
            var xRefIDParameter = xRefID.HasValue ?
                new ObjectParameter("XRefID", xRefID) :
                new ObjectParameter("XRefID", typeof(int));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var showMultiLevelsParameter = showMultiLevels.HasValue ?
                new ObjectParameter("ShowMultiLevels", showMultiLevels) :
                new ObjectParameter("ShowMultiLevels", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactsSelectAll_Result>("ContactsSelectAll", xRefIDParameter, suffixParameter, showMultiLevelsParameter);
        }
    
        public virtual int OrderDetailsInsertAppraisal(Nullable<int> orderNo, string enteredBy, string branchID, Nullable<int> processRowId, Nullable<bool> lockOverride, string productCode, string clientRefNo, string paymentMtd, Nullable<decimal> cODAmtDue, string responseMtd, string responseTo, string contact, string contactExt, Nullable<int> clientContactId, Nullable<bool> compPhotos, Nullable<bool> interiorPhotos, Nullable<bool> digitalPhotos, Nullable<int> hardcopyCnt, string hardcopyDlvyMtd, string vendorInstructions, string internalInstructions, string acresAbove5, Nullable<int> clientBundleID, Nullable<int> bundleDetailsID, string mIS_OrderNo, string mIS_Branch, string mIS_DeptID, string mIS_TeamID, string mIS_XWingID, ObjectParameter itemNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var branchIDParameter = branchID != null ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(string));
    
            var processRowIdParameter = processRowId.HasValue ?
                new ObjectParameter("ProcessRowId", processRowId) :
                new ObjectParameter("ProcessRowId", typeof(int));
    
            var lockOverrideParameter = lockOverride.HasValue ?
                new ObjectParameter("LockOverride", lockOverride) :
                new ObjectParameter("LockOverride", typeof(bool));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var clientRefNoParameter = clientRefNo != null ?
                new ObjectParameter("ClientRefNo", clientRefNo) :
                new ObjectParameter("ClientRefNo", typeof(string));
    
            var paymentMtdParameter = paymentMtd != null ?
                new ObjectParameter("PaymentMtd", paymentMtd) :
                new ObjectParameter("PaymentMtd", typeof(string));
    
            var cODAmtDueParameter = cODAmtDue.HasValue ?
                new ObjectParameter("CODAmtDue", cODAmtDue) :
                new ObjectParameter("CODAmtDue", typeof(decimal));
    
            var responseMtdParameter = responseMtd != null ?
                new ObjectParameter("ResponseMtd", responseMtd) :
                new ObjectParameter("ResponseMtd", typeof(string));
    
            var responseToParameter = responseTo != null ?
                new ObjectParameter("ResponseTo", responseTo) :
                new ObjectParameter("ResponseTo", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var contactExtParameter = contactExt != null ?
                new ObjectParameter("ContactExt", contactExt) :
                new ObjectParameter("ContactExt", typeof(string));
    
            var clientContactIdParameter = clientContactId.HasValue ?
                new ObjectParameter("ClientContactId", clientContactId) :
                new ObjectParameter("ClientContactId", typeof(int));
    
            var compPhotosParameter = compPhotos.HasValue ?
                new ObjectParameter("CompPhotos", compPhotos) :
                new ObjectParameter("CompPhotos", typeof(bool));
    
            var interiorPhotosParameter = interiorPhotos.HasValue ?
                new ObjectParameter("InteriorPhotos", interiorPhotos) :
                new ObjectParameter("InteriorPhotos", typeof(bool));
    
            var digitalPhotosParameter = digitalPhotos.HasValue ?
                new ObjectParameter("DigitalPhotos", digitalPhotos) :
                new ObjectParameter("DigitalPhotos", typeof(bool));
    
            var hardcopyCntParameter = hardcopyCnt.HasValue ?
                new ObjectParameter("HardcopyCnt", hardcopyCnt) :
                new ObjectParameter("HardcopyCnt", typeof(int));
    
            var hardcopyDlvyMtdParameter = hardcopyDlvyMtd != null ?
                new ObjectParameter("HardcopyDlvyMtd", hardcopyDlvyMtd) :
                new ObjectParameter("HardcopyDlvyMtd", typeof(string));
    
            var vendorInstructionsParameter = vendorInstructions != null ?
                new ObjectParameter("VendorInstructions", vendorInstructions) :
                new ObjectParameter("VendorInstructions", typeof(string));
    
            var internalInstructionsParameter = internalInstructions != null ?
                new ObjectParameter("InternalInstructions", internalInstructions) :
                new ObjectParameter("InternalInstructions", typeof(string));
    
            var acresAbove5Parameter = acresAbove5 != null ?
                new ObjectParameter("AcresAbove5", acresAbove5) :
                new ObjectParameter("AcresAbove5", typeof(string));
    
            var clientBundleIDParameter = clientBundleID.HasValue ?
                new ObjectParameter("ClientBundleID", clientBundleID) :
                new ObjectParameter("ClientBundleID", typeof(int));
    
            var bundleDetailsIDParameter = bundleDetailsID.HasValue ?
                new ObjectParameter("BundleDetailsID", bundleDetailsID) :
                new ObjectParameter("BundleDetailsID", typeof(int));
    
            var mIS_OrderNoParameter = mIS_OrderNo != null ?
                new ObjectParameter("MIS_OrderNo", mIS_OrderNo) :
                new ObjectParameter("MIS_OrderNo", typeof(string));
    
            var mIS_BranchParameter = mIS_Branch != null ?
                new ObjectParameter("MIS_Branch", mIS_Branch) :
                new ObjectParameter("MIS_Branch", typeof(string));
    
            var mIS_DeptIDParameter = mIS_DeptID != null ?
                new ObjectParameter("MIS_DeptID", mIS_DeptID) :
                new ObjectParameter("MIS_DeptID", typeof(string));
    
            var mIS_TeamIDParameter = mIS_TeamID != null ?
                new ObjectParameter("MIS_TeamID", mIS_TeamID) :
                new ObjectParameter("MIS_TeamID", typeof(string));
    
            var mIS_XWingIDParameter = mIS_XWingID != null ?
                new ObjectParameter("MIS_XWingID", mIS_XWingID) :
                new ObjectParameter("MIS_XWingID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderDetailsInsertAppraisal", orderNoParameter, enteredByParameter, branchIDParameter, processRowIdParameter, lockOverrideParameter, productCodeParameter, clientRefNoParameter, paymentMtdParameter, cODAmtDueParameter, responseMtdParameter, responseToParameter, contactParameter, contactExtParameter, clientContactIdParameter, compPhotosParameter, interiorPhotosParameter, digitalPhotosParameter, hardcopyCntParameter, hardcopyDlvyMtdParameter, vendorInstructionsParameter, internalInstructionsParameter, acresAbove5Parameter, clientBundleIDParameter, bundleDetailsIDParameter, mIS_OrderNoParameter, mIS_BranchParameter, mIS_DeptIDParameter, mIS_TeamIDParameter, mIS_XWingIDParameter, itemNo);
        }
    
        public virtual int OrderDetailsInsertClosing(Nullable<int> orderNo, string enteredBy, string branchID, Nullable<int> processRowId, Nullable<bool> lockOverride, string productCode, string clientRefNo, Nullable<int> noOfClosings, string contact, string contactExt, Nullable<int> clientContactId, Nullable<bool> docPrepReq, Nullable<bool> docPrepDeed, Nullable<bool> docPrepSub, Nullable<bool> docPrepOther, string clsAddresses, Nullable<bool> disburseFunds, Nullable<bool> accomodation, string vendorInstructions, string iNTernalInstructions, string initClsLoc, Nullable<System.DateTime> initSchedReq, string lienPosition, Nullable<decimal> interestRate, Nullable<int> loanType, Nullable<decimal> piggyInterestRate, Nullable<int> piggyLoanType, Nullable<bool> taxesInEscrow, Nullable<int> clientBundleID, Nullable<int> bundleDetailsID, string mIS_OrderNo, string mIS_Branch, string mIS_DeptID, string mIS_TeamID, string mIS_XWingID, ObjectParameter itemNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var branchIDParameter = branchID != null ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(string));
    
            var processRowIdParameter = processRowId.HasValue ?
                new ObjectParameter("ProcessRowId", processRowId) :
                new ObjectParameter("ProcessRowId", typeof(int));
    
            var lockOverrideParameter = lockOverride.HasValue ?
                new ObjectParameter("LockOverride", lockOverride) :
                new ObjectParameter("LockOverride", typeof(bool));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var clientRefNoParameter = clientRefNo != null ?
                new ObjectParameter("ClientRefNo", clientRefNo) :
                new ObjectParameter("ClientRefNo", typeof(string));
    
            var noOfClosingsParameter = noOfClosings.HasValue ?
                new ObjectParameter("NoOfClosings", noOfClosings) :
                new ObjectParameter("NoOfClosings", typeof(int));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var contactExtParameter = contactExt != null ?
                new ObjectParameter("ContactExt", contactExt) :
                new ObjectParameter("ContactExt", typeof(string));
    
            var clientContactIdParameter = clientContactId.HasValue ?
                new ObjectParameter("ClientContactId", clientContactId) :
                new ObjectParameter("ClientContactId", typeof(int));
    
            var docPrepReqParameter = docPrepReq.HasValue ?
                new ObjectParameter("DocPrepReq", docPrepReq) :
                new ObjectParameter("DocPrepReq", typeof(bool));
    
            var docPrepDeedParameter = docPrepDeed.HasValue ?
                new ObjectParameter("DocPrepDeed", docPrepDeed) :
                new ObjectParameter("DocPrepDeed", typeof(bool));
    
            var docPrepSubParameter = docPrepSub.HasValue ?
                new ObjectParameter("DocPrepSub", docPrepSub) :
                new ObjectParameter("DocPrepSub", typeof(bool));
    
            var docPrepOtherParameter = docPrepOther.HasValue ?
                new ObjectParameter("DocPrepOther", docPrepOther) :
                new ObjectParameter("DocPrepOther", typeof(bool));
    
            var clsAddressesParameter = clsAddresses != null ?
                new ObjectParameter("ClsAddresses", clsAddresses) :
                new ObjectParameter("ClsAddresses", typeof(string));
    
            var disburseFundsParameter = disburseFunds.HasValue ?
                new ObjectParameter("DisburseFunds", disburseFunds) :
                new ObjectParameter("DisburseFunds", typeof(bool));
    
            var accomodationParameter = accomodation.HasValue ?
                new ObjectParameter("Accomodation", accomodation) :
                new ObjectParameter("Accomodation", typeof(bool));
    
            var vendorInstructionsParameter = vendorInstructions != null ?
                new ObjectParameter("VendorInstructions", vendorInstructions) :
                new ObjectParameter("VendorInstructions", typeof(string));
    
            var iNTernalInstructionsParameter = iNTernalInstructions != null ?
                new ObjectParameter("INTernalInstructions", iNTernalInstructions) :
                new ObjectParameter("INTernalInstructions", typeof(string));
    
            var initClsLocParameter = initClsLoc != null ?
                new ObjectParameter("InitClsLoc", initClsLoc) :
                new ObjectParameter("InitClsLoc", typeof(string));
    
            var initSchedReqParameter = initSchedReq.HasValue ?
                new ObjectParameter("InitSchedReq", initSchedReq) :
                new ObjectParameter("InitSchedReq", typeof(System.DateTime));
    
            var lienPositionParameter = lienPosition != null ?
                new ObjectParameter("LienPosition", lienPosition) :
                new ObjectParameter("LienPosition", typeof(string));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var loanTypeParameter = loanType.HasValue ?
                new ObjectParameter("LoanType", loanType) :
                new ObjectParameter("LoanType", typeof(int));
    
            var piggyInterestRateParameter = piggyInterestRate.HasValue ?
                new ObjectParameter("PiggyInterestRate", piggyInterestRate) :
                new ObjectParameter("PiggyInterestRate", typeof(decimal));
    
            var piggyLoanTypeParameter = piggyLoanType.HasValue ?
                new ObjectParameter("PiggyLoanType", piggyLoanType) :
                new ObjectParameter("PiggyLoanType", typeof(int));
    
            var taxesInEscrowParameter = taxesInEscrow.HasValue ?
                new ObjectParameter("TaxesInEscrow", taxesInEscrow) :
                new ObjectParameter("TaxesInEscrow", typeof(bool));
    
            var clientBundleIDParameter = clientBundleID.HasValue ?
                new ObjectParameter("ClientBundleID", clientBundleID) :
                new ObjectParameter("ClientBundleID", typeof(int));
    
            var bundleDetailsIDParameter = bundleDetailsID.HasValue ?
                new ObjectParameter("BundleDetailsID", bundleDetailsID) :
                new ObjectParameter("BundleDetailsID", typeof(int));
    
            var mIS_OrderNoParameter = mIS_OrderNo != null ?
                new ObjectParameter("MIS_OrderNo", mIS_OrderNo) :
                new ObjectParameter("MIS_OrderNo", typeof(string));
    
            var mIS_BranchParameter = mIS_Branch != null ?
                new ObjectParameter("MIS_Branch", mIS_Branch) :
                new ObjectParameter("MIS_Branch", typeof(string));
    
            var mIS_DeptIDParameter = mIS_DeptID != null ?
                new ObjectParameter("MIS_DeptID", mIS_DeptID) :
                new ObjectParameter("MIS_DeptID", typeof(string));
    
            var mIS_TeamIDParameter = mIS_TeamID != null ?
                new ObjectParameter("MIS_TeamID", mIS_TeamID) :
                new ObjectParameter("MIS_TeamID", typeof(string));
    
            var mIS_XWingIDParameter = mIS_XWingID != null ?
                new ObjectParameter("MIS_XWingID", mIS_XWingID) :
                new ObjectParameter("MIS_XWingID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderDetailsInsertClosing", orderNoParameter, enteredByParameter, branchIDParameter, processRowIdParameter, lockOverrideParameter, productCodeParameter, clientRefNoParameter, noOfClosingsParameter, contactParameter, contactExtParameter, clientContactIdParameter, docPrepReqParameter, docPrepDeedParameter, docPrepSubParameter, docPrepOtherParameter, clsAddressesParameter, disburseFundsParameter, accomodationParameter, vendorInstructionsParameter, iNTernalInstructionsParameter, initClsLocParameter, initSchedReqParameter, lienPositionParameter, interestRateParameter, loanTypeParameter, piggyInterestRateParameter, piggyLoanTypeParameter, taxesInEscrowParameter, clientBundleIDParameter, bundleDetailsIDParameter, mIS_OrderNoParameter, mIS_BranchParameter, mIS_DeptIDParameter, mIS_TeamIDParameter, mIS_XWingIDParameter, itemNo);
        }
    
        public virtual int OrderDetailsInsertOther(Nullable<int> orderNo, string enteredBy, string branchID, Nullable<int> processRowId, Nullable<bool> lockOverride, string productCode, string clientRefNo, string contact, string contactExt, Nullable<int> clientContactId, string vendorInstructions, string internalInstructions, Nullable<int> clientBundleID, Nullable<int> bundleDetailsID, string mIS_OrderNo, string mIS_Branch, string mIS_DeptID, string mIS_TeamID, string mIS_XWingID, ObjectParameter itemNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var branchIDParameter = branchID != null ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(string));
    
            var processRowIdParameter = processRowId.HasValue ?
                new ObjectParameter("ProcessRowId", processRowId) :
                new ObjectParameter("ProcessRowId", typeof(int));
    
            var lockOverrideParameter = lockOverride.HasValue ?
                new ObjectParameter("LockOverride", lockOverride) :
                new ObjectParameter("LockOverride", typeof(bool));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var clientRefNoParameter = clientRefNo != null ?
                new ObjectParameter("ClientRefNo", clientRefNo) :
                new ObjectParameter("ClientRefNo", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var contactExtParameter = contactExt != null ?
                new ObjectParameter("ContactExt", contactExt) :
                new ObjectParameter("ContactExt", typeof(string));
    
            var clientContactIdParameter = clientContactId.HasValue ?
                new ObjectParameter("ClientContactId", clientContactId) :
                new ObjectParameter("ClientContactId", typeof(int));
    
            var vendorInstructionsParameter = vendorInstructions != null ?
                new ObjectParameter("VendorInstructions", vendorInstructions) :
                new ObjectParameter("VendorInstructions", typeof(string));
    
            var internalInstructionsParameter = internalInstructions != null ?
                new ObjectParameter("InternalInstructions", internalInstructions) :
                new ObjectParameter("InternalInstructions", typeof(string));
    
            var clientBundleIDParameter = clientBundleID.HasValue ?
                new ObjectParameter("ClientBundleID", clientBundleID) :
                new ObjectParameter("ClientBundleID", typeof(int));
    
            var bundleDetailsIDParameter = bundleDetailsID.HasValue ?
                new ObjectParameter("BundleDetailsID", bundleDetailsID) :
                new ObjectParameter("BundleDetailsID", typeof(int));
    
            var mIS_OrderNoParameter = mIS_OrderNo != null ?
                new ObjectParameter("MIS_OrderNo", mIS_OrderNo) :
                new ObjectParameter("MIS_OrderNo", typeof(string));
    
            var mIS_BranchParameter = mIS_Branch != null ?
                new ObjectParameter("MIS_Branch", mIS_Branch) :
                new ObjectParameter("MIS_Branch", typeof(string));
    
            var mIS_DeptIDParameter = mIS_DeptID != null ?
                new ObjectParameter("MIS_DeptID", mIS_DeptID) :
                new ObjectParameter("MIS_DeptID", typeof(string));
    
            var mIS_TeamIDParameter = mIS_TeamID != null ?
                new ObjectParameter("MIS_TeamID", mIS_TeamID) :
                new ObjectParameter("MIS_TeamID", typeof(string));
    
            var mIS_XWingIDParameter = mIS_XWingID != null ?
                new ObjectParameter("MIS_XWingID", mIS_XWingID) :
                new ObjectParameter("MIS_XWingID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderDetailsInsertOther", orderNoParameter, enteredByParameter, branchIDParameter, processRowIdParameter, lockOverrideParameter, productCodeParameter, clientRefNoParameter, contactParameter, contactExtParameter, clientContactIdParameter, vendorInstructionsParameter, internalInstructionsParameter, clientBundleIDParameter, bundleDetailsIDParameter, mIS_OrderNoParameter, mIS_BranchParameter, mIS_DeptIDParameter, mIS_TeamIDParameter, mIS_XWingIDParameter, itemNo);
        }
    
        public virtual int OrderDetailsInsertTitle(Nullable<int> orderNo, string enteredBy, string branchID, Nullable<int> processRowId, Nullable<bool> lockOverride, string productCode, string clientRefNo, string piggyBackProductCode, Nullable<bool> piggyBackOverride, string accountNo, Nullable<bool> payOffRecv, Nullable<bool> deedXfer, Nullable<int> yearsLived, string mtgHolder, string legalDesc, string contact, string contactExt, Nullable<int> clientContactId, Nullable<bool> docPrepReq, Nullable<bool> docPrepDeed, Nullable<bool> docPrepSub, Nullable<bool> docPrepOther, string vendorInstructions, string internalInstructions, Nullable<int> clientBundleID, Nullable<int> bundleDetailsID, string mIS_OrderNo, string mIS_Branch, string mIS_DeptID, string mIS_TeamID, string mIS_XWingID, Nullable<System.DateTime> proposedClsDate, Nullable<bool> ttlAltAddress, Nullable<int> altAddressId, ObjectParameter itemNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var branchIDParameter = branchID != null ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(string));
    
            var processRowIdParameter = processRowId.HasValue ?
                new ObjectParameter("ProcessRowId", processRowId) :
                new ObjectParameter("ProcessRowId", typeof(int));
    
            var lockOverrideParameter = lockOverride.HasValue ?
                new ObjectParameter("LockOverride", lockOverride) :
                new ObjectParameter("LockOverride", typeof(bool));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var clientRefNoParameter = clientRefNo != null ?
                new ObjectParameter("ClientRefNo", clientRefNo) :
                new ObjectParameter("ClientRefNo", typeof(string));
    
            var piggyBackProductCodeParameter = piggyBackProductCode != null ?
                new ObjectParameter("PiggyBackProductCode", piggyBackProductCode) :
                new ObjectParameter("PiggyBackProductCode", typeof(string));
    
            var piggyBackOverrideParameter = piggyBackOverride.HasValue ?
                new ObjectParameter("PiggyBackOverride", piggyBackOverride) :
                new ObjectParameter("PiggyBackOverride", typeof(bool));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var payOffRecvParameter = payOffRecv.HasValue ?
                new ObjectParameter("PayOffRecv", payOffRecv) :
                new ObjectParameter("PayOffRecv", typeof(bool));
    
            var deedXferParameter = deedXfer.HasValue ?
                new ObjectParameter("DeedXfer", deedXfer) :
                new ObjectParameter("DeedXfer", typeof(bool));
    
            var yearsLivedParameter = yearsLived.HasValue ?
                new ObjectParameter("YearsLived", yearsLived) :
                new ObjectParameter("YearsLived", typeof(int));
    
            var mtgHolderParameter = mtgHolder != null ?
                new ObjectParameter("MtgHolder", mtgHolder) :
                new ObjectParameter("MtgHolder", typeof(string));
    
            var legalDescParameter = legalDesc != null ?
                new ObjectParameter("LegalDesc", legalDesc) :
                new ObjectParameter("LegalDesc", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var contactExtParameter = contactExt != null ?
                new ObjectParameter("ContactExt", contactExt) :
                new ObjectParameter("ContactExt", typeof(string));
    
            var clientContactIdParameter = clientContactId.HasValue ?
                new ObjectParameter("ClientContactId", clientContactId) :
                new ObjectParameter("ClientContactId", typeof(int));
    
            var docPrepReqParameter = docPrepReq.HasValue ?
                new ObjectParameter("DocPrepReq", docPrepReq) :
                new ObjectParameter("DocPrepReq", typeof(bool));
    
            var docPrepDeedParameter = docPrepDeed.HasValue ?
                new ObjectParameter("DocPrepDeed", docPrepDeed) :
                new ObjectParameter("DocPrepDeed", typeof(bool));
    
            var docPrepSubParameter = docPrepSub.HasValue ?
                new ObjectParameter("DocPrepSub", docPrepSub) :
                new ObjectParameter("DocPrepSub", typeof(bool));
    
            var docPrepOtherParameter = docPrepOther.HasValue ?
                new ObjectParameter("DocPrepOther", docPrepOther) :
                new ObjectParameter("DocPrepOther", typeof(bool));
    
            var vendorInstructionsParameter = vendorInstructions != null ?
                new ObjectParameter("VendorInstructions", vendorInstructions) :
                new ObjectParameter("VendorInstructions", typeof(string));
    
            var internalInstructionsParameter = internalInstructions != null ?
                new ObjectParameter("InternalInstructions", internalInstructions) :
                new ObjectParameter("InternalInstructions", typeof(string));
    
            var clientBundleIDParameter = clientBundleID.HasValue ?
                new ObjectParameter("ClientBundleID", clientBundleID) :
                new ObjectParameter("ClientBundleID", typeof(int));
    
            var bundleDetailsIDParameter = bundleDetailsID.HasValue ?
                new ObjectParameter("BundleDetailsID", bundleDetailsID) :
                new ObjectParameter("BundleDetailsID", typeof(int));
    
            var mIS_OrderNoParameter = mIS_OrderNo != null ?
                new ObjectParameter("MIS_OrderNo", mIS_OrderNo) :
                new ObjectParameter("MIS_OrderNo", typeof(string));
    
            var mIS_BranchParameter = mIS_Branch != null ?
                new ObjectParameter("MIS_Branch", mIS_Branch) :
                new ObjectParameter("MIS_Branch", typeof(string));
    
            var mIS_DeptIDParameter = mIS_DeptID != null ?
                new ObjectParameter("MIS_DeptID", mIS_DeptID) :
                new ObjectParameter("MIS_DeptID", typeof(string));
    
            var mIS_TeamIDParameter = mIS_TeamID != null ?
                new ObjectParameter("MIS_TeamID", mIS_TeamID) :
                new ObjectParameter("MIS_TeamID", typeof(string));
    
            var mIS_XWingIDParameter = mIS_XWingID != null ?
                new ObjectParameter("MIS_XWingID", mIS_XWingID) :
                new ObjectParameter("MIS_XWingID", typeof(string));
    
            var proposedClsDateParameter = proposedClsDate.HasValue ?
                new ObjectParameter("ProposedClsDate", proposedClsDate) :
                new ObjectParameter("ProposedClsDate", typeof(System.DateTime));
    
            var ttlAltAddressParameter = ttlAltAddress.HasValue ?
                new ObjectParameter("ttlAltAddress", ttlAltAddress) :
                new ObjectParameter("ttlAltAddress", typeof(bool));
    
            var altAddressIdParameter = altAddressId.HasValue ?
                new ObjectParameter("AltAddressId", altAddressId) :
                new ObjectParameter("AltAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderDetailsInsertTitle", orderNoParameter, enteredByParameter, branchIDParameter, processRowIdParameter, lockOverrideParameter, productCodeParameter, clientRefNoParameter, piggyBackProductCodeParameter, piggyBackOverrideParameter, accountNoParameter, payOffRecvParameter, deedXferParameter, yearsLivedParameter, mtgHolderParameter, legalDescParameter, contactParameter, contactExtParameter, clientContactIdParameter, docPrepReqParameter, docPrepDeedParameter, docPrepSubParameter, docPrepOtherParameter, vendorInstructionsParameter, internalInstructionsParameter, clientBundleIDParameter, bundleDetailsIDParameter, mIS_OrderNoParameter, mIS_BranchParameter, mIS_DeptIDParameter, mIS_TeamIDParameter, mIS_XWingIDParameter, proposedClsDateParameter, ttlAltAddressParameter, altAddressIdParameter, itemNo);
        }
    
        public virtual int webLoginGet(string email, string password, string suffix, string ipAddress, string pageTheme, ObjectParameter xrefID, ObjectParameter contactID, ObjectParameter orderNo, ObjectParameter borrowerType, ObjectParameter hasChildren, ObjectParameter changePasswordReq, ObjectParameter accountLocked, ObjectParameter lastPasswordChange, ObjectParameter nextPasswordChange, ObjectParameter secretQuestionReq, ObjectParameter lastLogin)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            var pageThemeParameter = pageTheme != null ?
                new ObjectParameter("pageTheme", pageTheme) :
                new ObjectParameter("pageTheme", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("webLoginGet", emailParameter, passwordParameter, suffixParameter, ipAddressParameter, pageThemeParameter, xrefID, contactID, orderNo, borrowerType, hasChildren, changePasswordReq, accountLocked, lastPasswordChange, nextPasswordChange, secretQuestionReq, lastLogin);
        }
    
        public virtual ObjectResult<GetClientTransactionTypes_Result> GetClientTransactionTypes(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientTransactionTypes_Result>("GetClientTransactionTypes", clientIdParameter);
        }
    
        public virtual int BorrowersInsert(ObjectParameter borrowerId, Nullable<int> orderNo, Nullable<int> sequenceNo, Nullable<System.DateTime> enteredDate, string enteredBy, string type, string lastName, string firstName, string middleName, string suffix, string sSN, string homePhone, string workPhone, string cellPhone, string otherPhone, string email, string notifyURL, string password, Nullable<System.DateTime> dateOfBirth, ObjectParameter sysTimeStamp, Nullable<int> maritalStatusId)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var sequenceNoParameter = sequenceNo.HasValue ?
                new ObjectParameter("SequenceNo", sequenceNo) :
                new ObjectParameter("SequenceNo", typeof(int));
    
            var enteredDateParameter = enteredDate.HasValue ?
                new ObjectParameter("EnteredDate", enteredDate) :
                new ObjectParameter("EnteredDate", typeof(System.DateTime));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var otherPhoneParameter = otherPhone != null ?
                new ObjectParameter("OtherPhone", otherPhone) :
                new ObjectParameter("OtherPhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var notifyURLParameter = notifyURL != null ?
                new ObjectParameter("NotifyURL", notifyURL) :
                new ObjectParameter("NotifyURL", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var maritalStatusIdParameter = maritalStatusId.HasValue ?
                new ObjectParameter("MaritalStatusId", maritalStatusId) :
                new ObjectParameter("MaritalStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BorrowersInsert", borrowerId, orderNoParameter, sequenceNoParameter, enteredDateParameter, enteredByParameter, typeParameter, lastNameParameter, firstNameParameter, middleNameParameter, suffixParameter, sSNParameter, homePhoneParameter, workPhoneParameter, cellPhoneParameter, otherPhoneParameter, emailParameter, notifyURLParameter, passwordParameter, dateOfBirthParameter, sysTimeStamp, maritalStatusIdParameter);
        }
    
        public virtual ObjectResult<MaritalStatusCodesSelect_Result> MaritalStatusCodesSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MaritalStatusCodesSelect_Result>("MaritalStatusCodesSelect");
        }
    
        public virtual int OrderEntryComplete(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderEntryComplete", orderNoParameter);
        }
    
        public virtual int OrderMasterInsert(string enteredBy, string orderSource, string orderOrigination, Nullable<int> clientId, Nullable<bool> haveAddress, Nullable<bool> haveZip, string streetNo, string streetName, string streetName2, string streetType, string city, string state, string zip, string county, string countyCode, string loanNo, Nullable<decimal> loanAmount, string loanType, Nullable<bool> piggyback, Nullable<decimal> piggybackLoanAmt, Nullable<decimal> salesPrice, Nullable<decimal> estimatedValue, Nullable<bool> externalLender, Nullable<int> lenderId, Nullable<bool> nonOwnerOccupied, string clientOrderNo, string fHACaseNo, string propertyType, ObjectParameter orderNo, Nullable<bool> isTrid)
        {
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var orderSourceParameter = orderSource != null ?
                new ObjectParameter("OrderSource", orderSource) :
                new ObjectParameter("OrderSource", typeof(string));
    
            var orderOriginationParameter = orderOrigination != null ?
                new ObjectParameter("OrderOrigination", orderOrigination) :
                new ObjectParameter("OrderOrigination", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var haveAddressParameter = haveAddress.HasValue ?
                new ObjectParameter("HaveAddress", haveAddress) :
                new ObjectParameter("HaveAddress", typeof(bool));
    
            var haveZipParameter = haveZip.HasValue ?
                new ObjectParameter("HaveZip", haveZip) :
                new ObjectParameter("HaveZip", typeof(bool));
    
            var streetNoParameter = streetNo != null ?
                new ObjectParameter("StreetNo", streetNo) :
                new ObjectParameter("StreetNo", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var streetName2Parameter = streetName2 != null ?
                new ObjectParameter("StreetName2", streetName2) :
                new ObjectParameter("StreetName2", typeof(string));
    
            var streetTypeParameter = streetType != null ?
                new ObjectParameter("StreetType", streetType) :
                new ObjectParameter("StreetType", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(string));
    
            var countyCodeParameter = countyCode != null ?
                new ObjectParameter("CountyCode", countyCode) :
                new ObjectParameter("CountyCode", typeof(string));
    
            var loanNoParameter = loanNo != null ?
                new ObjectParameter("LoanNo", loanNo) :
                new ObjectParameter("LoanNo", typeof(string));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var loanTypeParameter = loanType != null ?
                new ObjectParameter("LoanType", loanType) :
                new ObjectParameter("LoanType", typeof(string));
    
            var piggybackParameter = piggyback.HasValue ?
                new ObjectParameter("Piggyback", piggyback) :
                new ObjectParameter("Piggyback", typeof(bool));
    
            var piggybackLoanAmtParameter = piggybackLoanAmt.HasValue ?
                new ObjectParameter("PiggybackLoanAmt", piggybackLoanAmt) :
                new ObjectParameter("PiggybackLoanAmt", typeof(decimal));
    
            var salesPriceParameter = salesPrice.HasValue ?
                new ObjectParameter("SalesPrice", salesPrice) :
                new ObjectParameter("SalesPrice", typeof(decimal));
    
            var estimatedValueParameter = estimatedValue.HasValue ?
                new ObjectParameter("EstimatedValue", estimatedValue) :
                new ObjectParameter("EstimatedValue", typeof(decimal));
    
            var externalLenderParameter = externalLender.HasValue ?
                new ObjectParameter("ExternalLender", externalLender) :
                new ObjectParameter("ExternalLender", typeof(bool));
    
            var lenderIdParameter = lenderId.HasValue ?
                new ObjectParameter("LenderId", lenderId) :
                new ObjectParameter("LenderId", typeof(int));
    
            var nonOwnerOccupiedParameter = nonOwnerOccupied.HasValue ?
                new ObjectParameter("NonOwnerOccupied", nonOwnerOccupied) :
                new ObjectParameter("NonOwnerOccupied", typeof(bool));
    
            var clientOrderNoParameter = clientOrderNo != null ?
                new ObjectParameter("ClientOrderNo", clientOrderNo) :
                new ObjectParameter("ClientOrderNo", typeof(string));
    
            var fHACaseNoParameter = fHACaseNo != null ?
                new ObjectParameter("FHACaseNo", fHACaseNo) :
                new ObjectParameter("FHACaseNo", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(string));
    
            var isTridParameter = isTrid.HasValue ?
                new ObjectParameter("IsTrid", isTrid) :
                new ObjectParameter("IsTrid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderMasterInsert", enteredByParameter, orderSourceParameter, orderOriginationParameter, clientIdParameter, haveAddressParameter, haveZipParameter, streetNoParameter, streetNameParameter, streetName2Parameter, streetTypeParameter, cityParameter, stateParameter, zipParameter, countyParameter, countyCodeParameter, loanNoParameter, loanAmountParameter, loanTypeParameter, piggybackParameter, piggybackLoanAmtParameter, salesPriceParameter, estimatedValueParameter, externalLenderParameter, lenderIdParameter, nonOwnerOccupiedParameter, clientOrderNoParameter, fHACaseNoParameter, propertyTypeParameter, orderNo, isTridParameter);
        }
    
        public virtual int ContactsSetRequireUserToChangePassword(Nullable<int> contactId, Nullable<bool> requireChangePassword)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            var requireChangePasswordParameter = requireChangePassword.HasValue ?
                new ObjectParameter("RequireChangePassword", requireChangePassword) :
                new ObjectParameter("RequireChangePassword", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactsSetRequireUserToChangePassword", contactIdParameter, requireChangePasswordParameter);
        }
    
        public virtual int webChangePassword(string contactID, string oldPassword, string newPassword, ObjectParameter success, ObjectParameter emailAddress)
        {
            var contactIDParameter = contactID != null ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(string));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("oldPassword", oldPassword) :
                new ObjectParameter("oldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("newPassword", newPassword) :
                new ObjectParameter("newPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("webChangePassword", contactIDParameter, oldPasswordParameter, newPasswordParameter, success, emailAddress);
        }
    
        public virtual int webChangeSecretQuestion(string contactID, Nullable<int> questionID, string answer)
        {
            var contactIDParameter = contactID != null ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(string));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("webChangeSecretQuestion", contactIDParameter, questionIDParameter, answerParameter);
        }
    
        public virtual int webSecretQuestionGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("webSecretQuestionGetAll");
        }
    
        public virtual int DelaySpecificVendorsSelectAll(Nullable<int> orderNo, Nullable<int> itemNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var itemNoParameter = itemNo.HasValue ?
                new ObjectParameter("ItemNo", itemNo) :
                new ObjectParameter("ItemNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelaySpecificVendorsSelectAll", orderNoParameter, itemNoParameter);
        }
    
        public virtual ObjectResult<EventTrackingDelaysCausedBySelectAll_Result> EventTrackingDelaysCausedBySelectAll(Nullable<int> eTD_RowId)
        {
            var eTD_RowIdParameter = eTD_RowId.HasValue ?
                new ObjectParameter("ETD_RowId", eTD_RowId) :
                new ObjectParameter("ETD_RowId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EventTrackingDelaysCausedBySelectAll_Result>("EventTrackingDelaysCausedBySelectAll", eTD_RowIdParameter);
        }
    
        public virtual ObjectResult<GetAllUserPermissionByPermissionCode_Result> GetAllUserPermissionByPermissionCode(string permissionCode)
        {
            var permissionCodeParameter = permissionCode != null ?
                new ObjectParameter("PermissionCode", permissionCode) :
                new ObjectParameter("PermissionCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserPermissionByPermissionCode_Result>("GetAllUserPermissionByPermissionCode", permissionCodeParameter);
        }
    
        public virtual ObjectResult<GetAuditLogClassAttibutes_Result> GetAuditLogClassAttibutes(string moduleName, string className)
        {
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAuditLogClassAttibutes_Result>("GetAuditLogClassAttibutes", moduleNameParameter, classNameParameter);
        }
    
        public virtual ObjectResult<GetAvailableStatesForCoverageByVendor_Result> GetAvailableStatesForCoverageByVendor(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAvailableStatesForCoverageByVendor_Result>("GetAvailableStatesForCoverageByVendor", vendorIdParameter);
        }
    
        public virtual ObjectResult<GetUserPermissionByUserIdAndPermissionCode_Result> GetUserPermissionByUserIdAndPermissionCode(string userId, string permissionCode)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var permissionCodeParameter = permissionCode != null ?
                new ObjectParameter("PermissionCode", permissionCode) :
                new ObjectParameter("PermissionCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserPermissionByUserIdAndPermissionCode_Result>("GetUserPermissionByUserIdAndPermissionCode", userIdParameter, permissionCodeParameter);
        }
    
        public virtual ObjectResult<string> sysGetAuditLogs_XML_InstanceName(Nullable<int> auditTypeID, Nullable<int> instanceID, string instanceName, string userID)
        {
            var auditTypeIDParameter = auditTypeID.HasValue ?
                new ObjectParameter("AuditTypeID", auditTypeID) :
                new ObjectParameter("AuditTypeID", typeof(int));
    
            var instanceIDParameter = instanceID.HasValue ?
                new ObjectParameter("InstanceID", instanceID) :
                new ObjectParameter("InstanceID", typeof(int));
    
            var instanceNameParameter = instanceName != null ?
                new ObjectParameter("InstanceName", instanceName) :
                new ObjectParameter("InstanceName", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sysGetAuditLogs_XML_InstanceName", auditTypeIDParameter, instanceIDParameter, instanceNameParameter, userIDParameter);
        }
    
        public virtual int DeleteInsertEventDelayCausedBy(string xml, Nullable<int> eT_DelayID)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            var eT_DelayIDParameter = eT_DelayID.HasValue ?
                new ObjectParameter("ET_DelayID", eT_DelayID) :
                new ObjectParameter("ET_DelayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteInsertEventDelayCausedBy", xmlParameter, eT_DelayIDParameter);
        }
    
        public virtual ObjectResult<string> GetEmailSignature(string userId, string branchId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetEmailSignature", userIdParameter, branchIdParameter);
        }
    
        public virtual int sysSaveAuditLog_XML_InstanceLevel(string auditLogXML, string userID, Nullable<int> auditTypeId, Nullable<int> entityPK, string instanceName)
        {
            var auditLogXMLParameter = auditLogXML != null ?
                new ObjectParameter("AuditLogXML", auditLogXML) :
                new ObjectParameter("AuditLogXML", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var auditTypeIdParameter = auditTypeId.HasValue ?
                new ObjectParameter("AuditTypeId", auditTypeId) :
                new ObjectParameter("AuditTypeId", typeof(int));
    
            var entityPKParameter = entityPK.HasValue ?
                new ObjectParameter("EntityPK", entityPK) :
                new ObjectParameter("EntityPK", typeof(int));
    
            var instanceNameParameter = instanceName != null ?
                new ObjectParameter("InstanceName", instanceName) :
                new ObjectParameter("InstanceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sysSaveAuditLog_XML_InstanceLevel", auditLogXMLParameter, userIDParameter, auditTypeIdParameter, entityPKParameter, instanceNameParameter);
        }
    
        public virtual int OrderSearch(string branchId, Nullable<int> minClientId, Nullable<int> maxClientId, Nullable<System.DateTime> minOrderDate, Nullable<System.DateTime> maxOrderDate, string borrowerLast, string loanNo, string status, string state, string county, string prodCode, Nullable<bool> appraisal, Nullable<bool> title, Nullable<bool> closing, Nullable<bool> other, string streetNo, string streetName, string policyNo, Nullable<int> parentId, Nullable<int> contactID, Nullable<bool> onlyMyClient, string userId)
        {
            var branchIdParameter = branchId != null ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(string));
    
            var minClientIdParameter = minClientId.HasValue ?
                new ObjectParameter("minClientId", minClientId) :
                new ObjectParameter("minClientId", typeof(int));
    
            var maxClientIdParameter = maxClientId.HasValue ?
                new ObjectParameter("maxClientId", maxClientId) :
                new ObjectParameter("maxClientId", typeof(int));
    
            var minOrderDateParameter = minOrderDate.HasValue ?
                new ObjectParameter("minOrderDate", minOrderDate) :
                new ObjectParameter("minOrderDate", typeof(System.DateTime));
    
            var maxOrderDateParameter = maxOrderDate.HasValue ?
                new ObjectParameter("maxOrderDate", maxOrderDate) :
                new ObjectParameter("maxOrderDate", typeof(System.DateTime));
    
            var borrowerLastParameter = borrowerLast != null ?
                new ObjectParameter("borrowerLast", borrowerLast) :
                new ObjectParameter("borrowerLast", typeof(string));
    
            var loanNoParameter = loanNo != null ?
                new ObjectParameter("LoanNo", loanNo) :
                new ObjectParameter("LoanNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("county", county) :
                new ObjectParameter("county", typeof(string));
    
            var prodCodeParameter = prodCode != null ?
                new ObjectParameter("prodCode", prodCode) :
                new ObjectParameter("prodCode", typeof(string));
    
            var appraisalParameter = appraisal.HasValue ?
                new ObjectParameter("appraisal", appraisal) :
                new ObjectParameter("appraisal", typeof(bool));
    
            var titleParameter = title.HasValue ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(bool));
    
            var closingParameter = closing.HasValue ?
                new ObjectParameter("closing", closing) :
                new ObjectParameter("closing", typeof(bool));
    
            var otherParameter = other.HasValue ?
                new ObjectParameter("other", other) :
                new ObjectParameter("other", typeof(bool));
    
            var streetNoParameter = streetNo != null ?
                new ObjectParameter("streetNo", streetNo) :
                new ObjectParameter("streetNo", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("streetName", streetName) :
                new ObjectParameter("streetName", typeof(string));
    
            var policyNoParameter = policyNo != null ?
                new ObjectParameter("policyNo", policyNo) :
                new ObjectParameter("policyNo", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var onlyMyClientParameter = onlyMyClient.HasValue ?
                new ObjectParameter("OnlyMyClient", onlyMyClient) :
                new ObjectParameter("OnlyMyClient", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderSearch", branchIdParameter, minClientIdParameter, maxClientIdParameter, minOrderDateParameter, maxOrderDateParameter, borrowerLastParameter, loanNoParameter, statusParameter, stateParameter, countyParameter, prodCodeParameter, appraisalParameter, titleParameter, closingParameter, otherParameter, streetNoParameter, streetNameParameter, policyNoParameter, parentIdParameter, contactIDParameter, onlyMyClientParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetClientList_Result> GetClientList(Nullable<int> parentId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientList_Result>("GetClientList", parentIdParameter);
        }
    
        public virtual ObjectResult<ContractOrderSearch_Result> ContractOrderSearch(Nullable<int> minOrderNo, Nullable<int> maxOrderNo, Nullable<int> clientId, string status, string loanNo, string assignedUser, Nullable<System.DateTime> disbursedDate, string borrowerName, string city, string state, string zip, string productCode, Nullable<bool> appraisal, Nullable<bool> title, Nullable<bool> closing, Nullable<bool> other, string loanOfficer, string transactionType, Nullable<int> showAllClients, Nullable<int> showAllChildrens, Nullable<int> isDefaultView)
        {
            var minOrderNoParameter = minOrderNo.HasValue ?
                new ObjectParameter("MinOrderNo", minOrderNo) :
                new ObjectParameter("MinOrderNo", typeof(int));
    
            var maxOrderNoParameter = maxOrderNo.HasValue ?
                new ObjectParameter("MaxOrderNo", maxOrderNo) :
                new ObjectParameter("MaxOrderNo", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loanNoParameter = loanNo != null ?
                new ObjectParameter("LoanNo", loanNo) :
                new ObjectParameter("LoanNo", typeof(string));
    
            var assignedUserParameter = assignedUser != null ?
                new ObjectParameter("AssignedUser", assignedUser) :
                new ObjectParameter("AssignedUser", typeof(string));
    
            var disbursedDateParameter = disbursedDate.HasValue ?
                new ObjectParameter("DisbursedDate", disbursedDate) :
                new ObjectParameter("DisbursedDate", typeof(System.DateTime));
    
            var borrowerNameParameter = borrowerName != null ?
                new ObjectParameter("BorrowerName", borrowerName) :
                new ObjectParameter("BorrowerName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var appraisalParameter = appraisal.HasValue ?
                new ObjectParameter("Appraisal", appraisal) :
                new ObjectParameter("Appraisal", typeof(bool));
    
            var titleParameter = title.HasValue ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(bool));
    
            var closingParameter = closing.HasValue ?
                new ObjectParameter("Closing", closing) :
                new ObjectParameter("Closing", typeof(bool));
    
            var otherParameter = other.HasValue ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(bool));
    
            var loanOfficerParameter = loanOfficer != null ?
                new ObjectParameter("LoanOfficer", loanOfficer) :
                new ObjectParameter("LoanOfficer", typeof(string));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var showAllClientsParameter = showAllClients.HasValue ?
                new ObjectParameter("ShowAllClients", showAllClients) :
                new ObjectParameter("ShowAllClients", typeof(int));
    
            var showAllChildrensParameter = showAllChildrens.HasValue ?
                new ObjectParameter("ShowAllChildrens", showAllChildrens) :
                new ObjectParameter("ShowAllChildrens", typeof(int));
    
            var isDefaultViewParameter = isDefaultView.HasValue ?
                new ObjectParameter("IsDefaultView", isDefaultView) :
                new ObjectParameter("IsDefaultView", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContractOrderSearch_Result>("ContractOrderSearch", minOrderNoParameter, maxOrderNoParameter, clientIdParameter, statusParameter, loanNoParameter, assignedUserParameter, disbursedDateParameter, borrowerNameParameter, cityParameter, stateParameter, zipParameter, productCodeParameter, appraisalParameter, titleParameter, closingParameter, otherParameter, loanOfficerParameter, transactionTypeParameter, showAllClientsParameter, showAllChildrensParameter, isDefaultViewParameter);
        }
    
        public virtual ObjectResult<CPGetClientList_Result> CPGetClientList(Nullable<int> parentId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetClientList_Result>("CPGetClientList", parentIdParameter);
        }
    
        public virtual int CPDocumentsInsert(Nullable<int> iD1, Nullable<int> iD2, string docType, string docPath, string description, string discRefNo, Nullable<bool> clientViewable, string docSource, string enteredBy, Nullable<System.DateTime> enteredDate, Nullable<int> eventID, Nullable<bool> vendorViewable, Nullable<bool> borrowerViewable, Nullable<int> docTypeID, string documentFolder, string uidHUDLine, string uidDisbursement, Nullable<bool> lockOtherDocs, string s3KeyName, Nullable<int> tCD_RowId, ObjectParameter rowId, Nullable<int> disbursementId, Nullable<bool> uploadfromWeb, string uploadBy)
        {
            var iD1Parameter = iD1.HasValue ?
                new ObjectParameter("ID1", iD1) :
                new ObjectParameter("ID1", typeof(int));
    
            var iD2Parameter = iD2.HasValue ?
                new ObjectParameter("ID2", iD2) :
                new ObjectParameter("ID2", typeof(int));
    
            var docTypeParameter = docType != null ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(string));
    
            var docPathParameter = docPath != null ?
                new ObjectParameter("DocPath", docPath) :
                new ObjectParameter("DocPath", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var discRefNoParameter = discRefNo != null ?
                new ObjectParameter("DiscRefNo", discRefNo) :
                new ObjectParameter("DiscRefNo", typeof(string));
    
            var clientViewableParameter = clientViewable.HasValue ?
                new ObjectParameter("ClientViewable", clientViewable) :
                new ObjectParameter("ClientViewable", typeof(bool));
    
            var docSourceParameter = docSource != null ?
                new ObjectParameter("DocSource", docSource) :
                new ObjectParameter("DocSource", typeof(string));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var enteredDateParameter = enteredDate.HasValue ?
                new ObjectParameter("EnteredDate", enteredDate) :
                new ObjectParameter("EnteredDate", typeof(System.DateTime));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var vendorViewableParameter = vendorViewable.HasValue ?
                new ObjectParameter("VendorViewable", vendorViewable) :
                new ObjectParameter("VendorViewable", typeof(bool));
    
            var borrowerViewableParameter = borrowerViewable.HasValue ?
                new ObjectParameter("BorrowerViewable", borrowerViewable) :
                new ObjectParameter("BorrowerViewable", typeof(bool));
    
            var docTypeIDParameter = docTypeID.HasValue ?
                new ObjectParameter("DocTypeID", docTypeID) :
                new ObjectParameter("DocTypeID", typeof(int));
    
            var documentFolderParameter = documentFolder != null ?
                new ObjectParameter("DocumentFolder", documentFolder) :
                new ObjectParameter("DocumentFolder", typeof(string));
    
            var uidHUDLineParameter = uidHUDLine != null ?
                new ObjectParameter("uidHUDLine", uidHUDLine) :
                new ObjectParameter("uidHUDLine", typeof(string));
    
            var uidDisbursementParameter = uidDisbursement != null ?
                new ObjectParameter("uidDisbursement", uidDisbursement) :
                new ObjectParameter("uidDisbursement", typeof(string));
    
            var lockOtherDocsParameter = lockOtherDocs.HasValue ?
                new ObjectParameter("LockOtherDocs", lockOtherDocs) :
                new ObjectParameter("LockOtherDocs", typeof(bool));
    
            var s3KeyNameParameter = s3KeyName != null ?
                new ObjectParameter("S3KeyName", s3KeyName) :
                new ObjectParameter("S3KeyName", typeof(string));
    
            var tCD_RowIdParameter = tCD_RowId.HasValue ?
                new ObjectParameter("TCD_RowId", tCD_RowId) :
                new ObjectParameter("TCD_RowId", typeof(int));
    
            var disbursementIdParameter = disbursementId.HasValue ?
                new ObjectParameter("DisbursementId", disbursementId) :
                new ObjectParameter("DisbursementId", typeof(int));
    
            var uploadfromWebParameter = uploadfromWeb.HasValue ?
                new ObjectParameter("UploadfromWeb", uploadfromWeb) :
                new ObjectParameter("UploadfromWeb", typeof(bool));
    
            var uploadByParameter = uploadBy != null ?
                new ObjectParameter("UploadBy", uploadBy) :
                new ObjectParameter("UploadBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPDocumentsInsert", iD1Parameter, iD2Parameter, docTypeParameter, docPathParameter, descriptionParameter, discRefNoParameter, clientViewableParameter, docSourceParameter, enteredByParameter, enteredDateParameter, eventIDParameter, vendorViewableParameter, borrowerViewableParameter, docTypeIDParameter, documentFolderParameter, uidHUDLineParameter, uidDisbursementParameter, lockOtherDocsParameter, s3KeyNameParameter, tCD_RowIdParameter, rowId, disbursementIdParameter, uploadfromWebParameter, uploadByParameter);
        }
    
        public virtual int CPSaveOrderDetails(string rvcOrderNumber, string rvcLoanNumber, string rvcPropertyType, Nullable<bool> rbResidentType, Nullable<int> riNumberOfUnits, Nullable<System.DateTime> rdPropertyAcquiredDate, Nullable<int> riMortgageType, Nullable<decimal> rmLoanAmount, string rvcLoanRate, string rvcLoanTerms, string rvcLoanPurpose, string rvcLoanProductType, Nullable<System.DateTime> rdRateLockDate, Nullable<System.DateTime> rdAnticipatedSettlementDate, string xmlBorrowerXML, string rvcEnteredBy)
        {
            var rvcOrderNumberParameter = rvcOrderNumber != null ?
                new ObjectParameter("rvcOrderNumber", rvcOrderNumber) :
                new ObjectParameter("rvcOrderNumber", typeof(string));
    
            var rvcLoanNumberParameter = rvcLoanNumber != null ?
                new ObjectParameter("rvcLoanNumber", rvcLoanNumber) :
                new ObjectParameter("rvcLoanNumber", typeof(string));
    
            var rvcPropertyTypeParameter = rvcPropertyType != null ?
                new ObjectParameter("rvcPropertyType", rvcPropertyType) :
                new ObjectParameter("rvcPropertyType", typeof(string));
    
            var rbResidentTypeParameter = rbResidentType.HasValue ?
                new ObjectParameter("rbResidentType", rbResidentType) :
                new ObjectParameter("rbResidentType", typeof(bool));
    
            var riNumberOfUnitsParameter = riNumberOfUnits.HasValue ?
                new ObjectParameter("riNumberOfUnits", riNumberOfUnits) :
                new ObjectParameter("riNumberOfUnits", typeof(int));
    
            var rdPropertyAcquiredDateParameter = rdPropertyAcquiredDate.HasValue ?
                new ObjectParameter("rdPropertyAcquiredDate", rdPropertyAcquiredDate) :
                new ObjectParameter("rdPropertyAcquiredDate", typeof(System.DateTime));
    
            var riMortgageTypeParameter = riMortgageType.HasValue ?
                new ObjectParameter("riMortgageType", riMortgageType) :
                new ObjectParameter("riMortgageType", typeof(int));
    
            var rmLoanAmountParameter = rmLoanAmount.HasValue ?
                new ObjectParameter("rmLoanAmount", rmLoanAmount) :
                new ObjectParameter("rmLoanAmount", typeof(decimal));
    
            var rvcLoanRateParameter = rvcLoanRate != null ?
                new ObjectParameter("rvcLoanRate", rvcLoanRate) :
                new ObjectParameter("rvcLoanRate", typeof(string));
    
            var rvcLoanTermsParameter = rvcLoanTerms != null ?
                new ObjectParameter("rvcLoanTerms", rvcLoanTerms) :
                new ObjectParameter("rvcLoanTerms", typeof(string));
    
            var rvcLoanPurposeParameter = rvcLoanPurpose != null ?
                new ObjectParameter("rvcLoanPurpose", rvcLoanPurpose) :
                new ObjectParameter("rvcLoanPurpose", typeof(string));
    
            var rvcLoanProductTypeParameter = rvcLoanProductType != null ?
                new ObjectParameter("rvcLoanProductType", rvcLoanProductType) :
                new ObjectParameter("rvcLoanProductType", typeof(string));
    
            var rdRateLockDateParameter = rdRateLockDate.HasValue ?
                new ObjectParameter("rdRateLockDate", rdRateLockDate) :
                new ObjectParameter("rdRateLockDate", typeof(System.DateTime));
    
            var rdAnticipatedSettlementDateParameter = rdAnticipatedSettlementDate.HasValue ?
                new ObjectParameter("rdAnticipatedSettlementDate", rdAnticipatedSettlementDate) :
                new ObjectParameter("rdAnticipatedSettlementDate", typeof(System.DateTime));
    
            var xmlBorrowerXMLParameter = xmlBorrowerXML != null ?
                new ObjectParameter("xmlBorrowerXML", xmlBorrowerXML) :
                new ObjectParameter("xmlBorrowerXML", typeof(string));
    
            var rvcEnteredByParameter = rvcEnteredBy != null ?
                new ObjectParameter("rvcEnteredBy", rvcEnteredBy) :
                new ObjectParameter("rvcEnteredBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPSaveOrderDetails", rvcOrderNumberParameter, rvcLoanNumberParameter, rvcPropertyTypeParameter, rbResidentTypeParameter, riNumberOfUnitsParameter, rdPropertyAcquiredDateParameter, riMortgageTypeParameter, rmLoanAmountParameter, rvcLoanRateParameter, rvcLoanTermsParameter, rvcLoanPurposeParameter, rvcLoanProductTypeParameter, rdRateLockDateParameter, rdAnticipatedSettlementDateParameter, xmlBorrowerXMLParameter, rvcEnteredByParameter);
        }
    
        public virtual ObjectResult<CPGetCOOPMileStone_Result> CPGetCOOPMileStone(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetCOOPMileStone_Result>("CPGetCOOPMileStone", orderNoParameter);
        }
    
        public virtual int CPGetProductCodeByOrder(Nullable<int> orderNo, ObjectParameter productCode)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPGetProductCodeByOrder", orderNoParameter, productCode);
        }
    
        public virtual ObjectResult<CPGetPurchaseMileStone_Result> CPGetPurchaseMileStone(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetPurchaseMileStone_Result>("CPGetPurchaseMileStone", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetTitleMileStone_Result> CPGetTitleMileStone(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetTitleMileStone_Result>("CPGetTitleMileStone", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetCOOPCheckList_Result> CPGetCOOPCheckList(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetCOOPCheckList_Result>("CPGetCOOPCheckList", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetPurchaseCheckList_Result> CPGetPurchaseCheckList(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetPurchaseCheckList_Result>("CPGetPurchaseCheckList", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetTitleCheckList_Result> CPGetTitleCheckList(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetTitleCheckList_Result>("CPGetTitleCheckList", orderNoParameter);
        }
    
        public virtual ObjectResult<GetClientDetails_Result> GetClientDetails(Nullable<int> riContactId)
        {
            var riContactIdParameter = riContactId.HasValue ?
                new ObjectParameter("riContactId", riContactId) :
                new ObjectParameter("riContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientDetails_Result>("GetClientDetails", riContactIdParameter);
        }
    
        public virtual ObjectResult<GetCompanyDetails_Result> GetCompanyDetails(Nullable<int> riClientID)
        {
            var riClientIDParameter = riClientID.HasValue ?
                new ObjectParameter("riClientID", riClientID) :
                new ObjectParameter("riClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyDetails_Result>("GetCompanyDetails", riClientIDParameter);
        }
    
        public virtual int CPSaveOrderStatus(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPSaveOrderStatus", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetLoanPolicyDetails_Result> CPGetLoanPolicyDetails(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetLoanPolicyDetails_Result>("CPGetLoanPolicyDetails", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetRecordingDetails_Result> CPGetRecordingDetails(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetRecordingDetails_Result>("CPGetRecordingDetails", orderNoParameter);
        }
    
        public virtual int CPAddTitleBillReqEvent(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPAddTitleBillReqEvent", orderNoParameter);
        }
    
        public virtual int CPAddTitleProduct(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPAddTitleProduct", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetLeinsDetail_Result> CPGetLeinsDetail(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetLeinsDetail_Result>("CPGetLeinsDetail", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetTitleDocumentsSelectAll_Result> CPGetTitleDocumentsSelectAll(Nullable<int> iD1)
        {
            var iD1Parameter = iD1.HasValue ?
                new ObjectParameter("ID1", iD1) :
                new ObjectParameter("ID1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetTitleDocumentsSelectAll_Result>("CPGetTitleDocumentsSelectAll", iD1Parameter);
        }
    
        public virtual ObjectResult<CPGetTitleOrderDetails_Result> CPGetTitleOrderDetails(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetTitleOrderDetails_Result>("CPGetTitleOrderDetails", orderNoParameter);
        }
    
        public virtual int CPAddOrderNoteInEmailQueue(Nullable<int> orderNo, string note, string noteType)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var noteTypeParameter = noteType != null ?
                new ObjectParameter("NoteType", noteType) :
                new ObjectParameter("NoteType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPAddOrderNoteInEmailQueue", orderNoParameter, noteParameter, noteTypeParameter);
        }
    
        public virtual ObjectResult<CPGetPreCloseDetails_Result> CPGetPreCloseDetails(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetPreCloseDetails_Result>("CPGetPreCloseDetails", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetPreCloseDocuments_Result> CPGetPreCloseDocuments(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetPreCloseDocuments_Result>("CPGetPreCloseDocuments", orderNoParameter);
        }
    
        public virtual ObjectResult<string> CPGetSignatureRequirement(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CPGetSignatureRequirement", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetPostCloseDocuments_Result> CPGetPostCloseDocuments(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetPostCloseDocuments_Result>("CPGetPostCloseDocuments", orderNoParameter);
        }
    
        public virtual int CPSavePreCloseDetail(Nullable<int> orderNo, string username, string client, Nullable<System.DateTime> scheduleDate, Nullable<System.DateTime> anticipatedCloseDate, string anticipatedCloseBy)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var anticipatedCloseDateParameter = anticipatedCloseDate.HasValue ?
                new ObjectParameter("AnticipatedCloseDate", anticipatedCloseDate) :
                new ObjectParameter("AnticipatedCloseDate", typeof(System.DateTime));
    
            var anticipatedCloseByParameter = anticipatedCloseBy != null ?
                new ObjectParameter("AnticipatedCloseBy", anticipatedCloseBy) :
                new ObjectParameter("AnticipatedCloseBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPSavePreCloseDetail", orderNoParameter, usernameParameter, clientParameter, scheduleDateParameter, anticipatedCloseDateParameter, anticipatedCloseByParameter);
        }
    
        public virtual ObjectResult<CPGetPermissionsAgainstRole_Result> CPGetPermissionsAgainstRole(Nullable<int> roleID, string screenName)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var screenNameParameter = screenName != null ?
                new ObjectParameter("ScreenName", screenName) :
                new ObjectParameter("ScreenName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetPermissionsAgainstRole_Result>("CPGetPermissionsAgainstRole", roleIDParameter, screenNameParameter);
        }
    
        public virtual ObjectResult<TCDetailsSelectAll_Result> TCDetailsSelectAll(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TCDetailsSelectAll_Result>("TCDetailsSelectAll", orderNoParameter);
        }
    
        public virtual int CPSaveNewYorkAttorneyItem(Nullable<int> orderNo, string clearedBy, Nullable<int> rowId)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var clearedByParameter = clearedBy != null ?
                new ObjectParameter("ClearedBy", clearedBy) :
                new ObjectParameter("ClearedBy", typeof(string));
    
            var rowIdParameter = rowId.HasValue ?
                new ObjectParameter("RowId", rowId) :
                new ObjectParameter("RowId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPSaveNewYorkAttorneyItem", orderNoParameter, clearedByParameter, rowIdParameter);
        }
    
        public virtual ObjectResult<CPGetTCCleartoCloseDetail_Result> CPGetTCCleartoCloseDetail(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetTCCleartoCloseDetail_Result>("CPGetTCCleartoCloseDetail", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetSecurityFormControls_Result> CPGetSecurityFormControls(Nullable<int> applicationId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetSecurityFormControls_Result>("CPGetSecurityFormControls", applicationIdParameter);
        }
    
        public virtual int CPDeleteSecurityControl(Nullable<int> securityControlId)
        {
            var securityControlIdParameter = securityControlId.HasValue ?
                new ObjectParameter("SecurityControlId", securityControlId) :
                new ObjectParameter("SecurityControlId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPDeleteSecurityControl", securityControlIdParameter);
        }
    
        public virtual int CPDeleteSecurityForm(Nullable<int> securityFormId)
        {
            var securityFormIdParameter = securityFormId.HasValue ?
                new ObjectParameter("SecurityFormId", securityFormId) :
                new ObjectParameter("SecurityFormId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPDeleteSecurityForm", securityFormIdParameter);
        }
    
        public virtual int CPDeleteSecurityFormControl(Nullable<int> securityFormControlId)
        {
            var securityFormControlIdParameter = securityFormControlId.HasValue ?
                new ObjectParameter("SecurityFormControlId", securityFormControlId) :
                new ObjectParameter("SecurityFormControlId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPDeleteSecurityFormControl", securityFormControlIdParameter);
        }
    
        public virtual ObjectResult<CPGetDownloadDocumentList_Result> CPGetDownloadDocumentList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetDownloadDocumentList_Result>("CPGetDownloadDocumentList");
        }
    
        public virtual int EmailQueueInsert(ObjectParameter rowId, string mailFrom, string mailTo, string mailSubject, string mailBody, string attachmentFileName)
        {
            var mailFromParameter = mailFrom != null ?
                new ObjectParameter("MailFrom", mailFrom) :
                new ObjectParameter("MailFrom", typeof(string));
    
            var mailToParameter = mailTo != null ?
                new ObjectParameter("MailTo", mailTo) :
                new ObjectParameter("MailTo", typeof(string));
    
            var mailSubjectParameter = mailSubject != null ?
                new ObjectParameter("MailSubject", mailSubject) :
                new ObjectParameter("MailSubject", typeof(string));
    
            var mailBodyParameter = mailBody != null ?
                new ObjectParameter("MailBody", mailBody) :
                new ObjectParameter("MailBody", typeof(string));
    
            var attachmentFileNameParameter = attachmentFileName != null ?
                new ObjectParameter("AttachmentFileName", attachmentFileName) :
                new ObjectParameter("AttachmentFileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmailQueueInsert", rowId, mailFromParameter, mailToParameter, mailSubjectParameter, mailBodyParameter, attachmentFileNameParameter);
        }
    
        public virtual int webUserRolesUpdate(Nullable<int> contactID, Nullable<int> roleID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("contactID", contactID) :
                new ObjectParameter("contactID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("webUserRolesUpdate", contactIDParameter, roleIDParameter);
        }
    
        public virtual int CPGetRegisterUserDetails(string invitationCode, Nullable<int> xRefId, string suffix, ObjectParameter clientId, ObjectParameter webRoleId, ObjectParameter sequenceNo, ObjectParameter contactId)
        {
            var invitationCodeParameter = invitationCode != null ?
                new ObjectParameter("InvitationCode", invitationCode) :
                new ObjectParameter("InvitationCode", typeof(string));
    
            var xRefIdParameter = xRefId.HasValue ?
                new ObjectParameter("XRefId", xRefId) :
                new ObjectParameter("XRefId", typeof(int));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPGetRegisterUserDetails", invitationCodeParameter, xRefIdParameter, suffixParameter, clientId, webRoleId, sequenceNo, contactId);
        }
    
        public virtual int CPVaidateUserEmail(string emailAddress, ObjectParameter oiContactId, ObjectParameter obSuccess)
        {
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPVaidateUserEmail", emailAddressParameter, oiContactId, obSuccess);
        }
    
        public virtual int CPSaveFileClearanceRequested(Nullable<int> orderNo, string approvalBy, string emailFrom, string emailTo, string emailSubject, string emailBody)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var approvalByParameter = approvalBy != null ?
                new ObjectParameter("ApprovalBy", approvalBy) :
                new ObjectParameter("ApprovalBy", typeof(string));
    
            var emailFromParameter = emailFrom != null ?
                new ObjectParameter("EmailFrom", emailFrom) :
                new ObjectParameter("EmailFrom", typeof(string));
    
            var emailToParameter = emailTo != null ?
                new ObjectParameter("EmailTo", emailTo) :
                new ObjectParameter("EmailTo", typeof(string));
    
            var emailSubjectParameter = emailSubject != null ?
                new ObjectParameter("EmailSubject", emailSubject) :
                new ObjectParameter("EmailSubject", typeof(string));
    
            var emailBodyParameter = emailBody != null ?
                new ObjectParameter("EmailBody", emailBody) :
                new ObjectParameter("EmailBody", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPSaveFileClearanceRequested", orderNoParameter, approvalByParameter, emailFromParameter, emailToParameter, emailSubjectParameter, emailBodyParameter);
        }
    
        public virtual ObjectResult<OrderDetailsItemsSelect_Result> OrderDetailsItemsSelect(Nullable<int> orderNo, Nullable<bool> titleOnly, Nullable<bool> closingOnly)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var titleOnlyParameter = titleOnly.HasValue ?
                new ObjectParameter("TitleOnly", titleOnly) :
                new ObjectParameter("TitleOnly", typeof(bool));
    
            var closingOnlyParameter = closingOnly.HasValue ?
                new ObjectParameter("ClosingOnly", closingOnly) :
                new ObjectParameter("ClosingOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderDetailsItemsSelect_Result>("OrderDetailsItemsSelect", orderNoParameter, titleOnlyParameter, closingOnlyParameter);
        }
    
        public virtual ObjectResult<CPOrderSummary_Result> CPOrderSummary(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPOrderSummary_Result>("CPOrderSummary", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetOrderHeader_Result> CPGetOrderHeader(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetOrderHeader_Result>("CPGetOrderHeader", orderNoParameter);
        }
    
        public virtual ObjectResult<CPGetAccountProfile_Result> CPGetAccountProfile(Nullable<int> contactId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetAccountProfile_Result>("CPGetAccountProfile", contactIdParameter);
        }
    
        public virtual ObjectResult<CPGetOrderDetails_Result> CPGetOrderDetails(string rvcOrderNumber)
        {
            var rvcOrderNumberParameter = rvcOrderNumber != null ?
                new ObjectParameter("rvcOrderNumber", rvcOrderNumber) :
                new ObjectParameter("rvcOrderNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetOrderDetails_Result>("CPGetOrderDetails", rvcOrderNumberParameter);
        }
    
        public virtual ObjectResult<CPGetOrderPartyDetails_Result> CPGetOrderPartyDetails(string rvcOrderNumber)
        {
            var rvcOrderNumberParameter = rvcOrderNumber != null ?
                new ObjectParameter("rvcOrderNumber", rvcOrderNumber) :
                new ObjectParameter("rvcOrderNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetOrderPartyDetails_Result>("CPGetOrderPartyDetails", rvcOrderNumberParameter);
        }
    
        public virtual int CPRegisterClient(string invitationCode, string firstName, string lastName, string email, ObjectParameter message, ObjectParameter url, ObjectParameter contactId, ObjectParameter webRoleId)
        {
            var invitationCodeParameter = invitationCode != null ?
                new ObjectParameter("InvitationCode", invitationCode) :
                new ObjectParameter("InvitationCode", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPRegisterClient", invitationCodeParameter, firstNameParameter, lastNameParameter, emailParameter, message, url, contactId, webRoleId);
        }
    
        public virtual ObjectResult<CPSearchOrderNotesByOrderNo_Result> CPSearchOrderNotesByOrderNo(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPSearchOrderNotesByOrderNo_Result>("CPSearchOrderNotesByOrderNo", orderNoParameter);
        }
    
        public virtual int CPGetOrderAssignedUserDetails(Nullable<int> orderNo, ObjectParameter assignedUser, ObjectParameter emailAddress)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPGetOrderAssignedUserDetails", orderNoParameter, assignedUser, emailAddress);
        }
    
        public virtual ObjectResult<GetOrderDetailByOrderNo_Result> GetOrderDetailByOrderNo(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderDetailByOrderNo_Result>("GetOrderDetailByOrderNo", orderNoParameter);
        }
    
        public virtual ObjectResult<DocumentsSelectAll_Result> DocumentsSelectAll(Nullable<int> iD1, Nullable<int> iD2, string docType, Nullable<bool> vendorViewable, Nullable<bool> clientViewable, Nullable<bool> borrowerViewable)
        {
            var iD1Parameter = iD1.HasValue ?
                new ObjectParameter("ID1", iD1) :
                new ObjectParameter("ID1", typeof(int));
    
            var iD2Parameter = iD2.HasValue ?
                new ObjectParameter("ID2", iD2) :
                new ObjectParameter("ID2", typeof(int));
    
            var docTypeParameter = docType != null ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(string));
    
            var vendorViewableParameter = vendorViewable.HasValue ?
                new ObjectParameter("VendorViewable", vendorViewable) :
                new ObjectParameter("VendorViewable", typeof(bool));
    
            var clientViewableParameter = clientViewable.HasValue ?
                new ObjectParameter("ClientViewable", clientViewable) :
                new ObjectParameter("ClientViewable", typeof(bool));
    
            var borrowerViewableParameter = borrowerViewable.HasValue ?
                new ObjectParameter("BorrowerViewable", borrowerViewable) :
                new ObjectParameter("BorrowerViewable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentsSelectAll_Result>("DocumentsSelectAll", iD1Parameter, iD2Parameter, docTypeParameter, vendorViewableParameter, clientViewableParameter, borrowerViewableParameter);
        }
    
        public virtual ObjectResult<CPGetContactNames_Result> CPGetContactNames(Nullable<int> lenderId)
        {
            var lenderIdParameter = lenderId.HasValue ?
                new ObjectParameter("LenderId", lenderId) :
                new ObjectParameter("LenderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetContactNames_Result>("CPGetContactNames", lenderIdParameter);
        }
    
        public virtual int CPSavePropertyDetail(string propertyType, string address1, string address1Name, string address2, string zip, string city, string county, string state, string propertyDetail, Nullable<int> xRefId, string informationName, string managingAgentName, string phone, string cell, string email, string stockCertificateNumber, string sharesCount, Nullable<bool> isLeaseAssigned, string leaseDate, string propertyAddressSuffix, string propertyAddressType, string propertyAddress1, string propertyAddress2, string propertyCity, string propertyState, string propertyZip, string propertyCounty, string propertyDetailXml, string expirationDate)
        {
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address1NameParameter = address1Name != null ?
                new ObjectParameter("Address1Name", address1Name) :
                new ObjectParameter("Address1Name", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("county", county) :
                new ObjectParameter("county", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var propertyDetailParameter = propertyDetail != null ?
                new ObjectParameter("PropertyDetail", propertyDetail) :
                new ObjectParameter("PropertyDetail", typeof(string));
    
            var xRefIdParameter = xRefId.HasValue ?
                new ObjectParameter("XRefId", xRefId) :
                new ObjectParameter("XRefId", typeof(int));
    
            var informationNameParameter = informationName != null ?
                new ObjectParameter("InformationName", informationName) :
                new ObjectParameter("InformationName", typeof(string));
    
            var managingAgentNameParameter = managingAgentName != null ?
                new ObjectParameter("ManagingAgentName", managingAgentName) :
                new ObjectParameter("ManagingAgentName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var cellParameter = cell != null ?
                new ObjectParameter("Cell", cell) :
                new ObjectParameter("Cell", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var stockCertificateNumberParameter = stockCertificateNumber != null ?
                new ObjectParameter("StockCertificateNumber", stockCertificateNumber) :
                new ObjectParameter("StockCertificateNumber", typeof(string));
    
            var sharesCountParameter = sharesCount != null ?
                new ObjectParameter("SharesCount", sharesCount) :
                new ObjectParameter("SharesCount", typeof(string));
    
            var isLeaseAssignedParameter = isLeaseAssigned.HasValue ?
                new ObjectParameter("IsLeaseAssigned", isLeaseAssigned) :
                new ObjectParameter("IsLeaseAssigned", typeof(bool));
    
            var leaseDateParameter = leaseDate != null ?
                new ObjectParameter("LeaseDate", leaseDate) :
                new ObjectParameter("LeaseDate", typeof(string));
    
            var propertyAddressSuffixParameter = propertyAddressSuffix != null ?
                new ObjectParameter("PropertyAddressSuffix", propertyAddressSuffix) :
                new ObjectParameter("PropertyAddressSuffix", typeof(string));
    
            var propertyAddressTypeParameter = propertyAddressType != null ?
                new ObjectParameter("PropertyAddressType", propertyAddressType) :
                new ObjectParameter("PropertyAddressType", typeof(string));
    
            var propertyAddress1Parameter = propertyAddress1 != null ?
                new ObjectParameter("PropertyAddress1", propertyAddress1) :
                new ObjectParameter("PropertyAddress1", typeof(string));
    
            var propertyAddress2Parameter = propertyAddress2 != null ?
                new ObjectParameter("PropertyAddress2", propertyAddress2) :
                new ObjectParameter("PropertyAddress2", typeof(string));
    
            var propertyCityParameter = propertyCity != null ?
                new ObjectParameter("PropertyCity", propertyCity) :
                new ObjectParameter("PropertyCity", typeof(string));
    
            var propertyStateParameter = propertyState != null ?
                new ObjectParameter("PropertyState", propertyState) :
                new ObjectParameter("PropertyState", typeof(string));
    
            var propertyZipParameter = propertyZip != null ?
                new ObjectParameter("PropertyZip", propertyZip) :
                new ObjectParameter("PropertyZip", typeof(string));
    
            var propertyCountyParameter = propertyCounty != null ?
                new ObjectParameter("PropertyCounty", propertyCounty) :
                new ObjectParameter("PropertyCounty", typeof(string));
    
            var propertyDetailXmlParameter = propertyDetailXml != null ?
                new ObjectParameter("PropertyDetailXml", propertyDetailXml) :
                new ObjectParameter("PropertyDetailXml", typeof(string));
    
            var expirationDateParameter = expirationDate != null ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPSavePropertyDetail", propertyTypeParameter, address1Parameter, address1NameParameter, address2Parameter, zipParameter, cityParameter, countyParameter, stateParameter, propertyDetailParameter, xRefIdParameter, informationNameParameter, managingAgentNameParameter, phoneParameter, cellParameter, emailParameter, stockCertificateNumberParameter, sharesCountParameter, isLeaseAssignedParameter, leaseDateParameter, propertyAddressSuffixParameter, propertyAddressTypeParameter, propertyAddress1Parameter, propertyAddress2Parameter, propertyCityParameter, propertyStateParameter, propertyZipParameter, propertyCountyParameter, propertyDetailXmlParameter, expirationDateParameter);
        }
    
        public virtual int CPSaveOrderEntry(string enteredBy, string orderSource, string orderOrigination, Nullable<int> clientId, Nullable<bool> haveAddress, Nullable<bool> haveZip, string streetNo, string streetName, string address2, string city, string state, string zip, string county, string loanNo, Nullable<decimal> loanAmount, string loanType, string propertyType, string note, string contactType, string contactName, string transactionTypesXml, string borrowersXml, ObjectParameter orderNo)
        {
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var orderSourceParameter = orderSource != null ?
                new ObjectParameter("OrderSource", orderSource) :
                new ObjectParameter("OrderSource", typeof(string));
    
            var orderOriginationParameter = orderOrigination != null ?
                new ObjectParameter("OrderOrigination", orderOrigination) :
                new ObjectParameter("OrderOrigination", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var haveAddressParameter = haveAddress.HasValue ?
                new ObjectParameter("HaveAddress", haveAddress) :
                new ObjectParameter("HaveAddress", typeof(bool));
    
            var haveZipParameter = haveZip.HasValue ?
                new ObjectParameter("HaveZip", haveZip) :
                new ObjectParameter("HaveZip", typeof(bool));
    
            var streetNoParameter = streetNo != null ?
                new ObjectParameter("StreetNo", streetNo) :
                new ObjectParameter("StreetNo", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(string));
    
            var loanNoParameter = loanNo != null ?
                new ObjectParameter("LoanNo", loanNo) :
                new ObjectParameter("LoanNo", typeof(string));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var loanTypeParameter = loanType != null ?
                new ObjectParameter("LoanType", loanType) :
                new ObjectParameter("LoanType", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var contactTypeParameter = contactType != null ?
                new ObjectParameter("ContactType", contactType) :
                new ObjectParameter("ContactType", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var transactionTypesXmlParameter = transactionTypesXml != null ?
                new ObjectParameter("TransactionTypesXml", transactionTypesXml) :
                new ObjectParameter("TransactionTypesXml", typeof(string));
    
            var borrowersXmlParameter = borrowersXml != null ?
                new ObjectParameter("BorrowersXml", borrowersXml) :
                new ObjectParameter("BorrowersXml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CPSaveOrderEntry", enteredByParameter, orderSourceParameter, orderOriginationParameter, clientIdParameter, haveAddressParameter, haveZipParameter, streetNoParameter, streetNameParameter, address2Parameter, cityParameter, stateParameter, zipParameter, countyParameter, loanNoParameter, loanAmountParameter, loanTypeParameter, propertyTypeParameter, noteParameter, contactTypeParameter, contactNameParameter, transactionTypesXmlParameter, borrowersXmlParameter, orderNo);
        }
    
        public virtual ObjectResult<CPTCRequestQuestionsAnswered_Result> CPTCRequestQuestionsAnswered(Nullable<int> orderNo, string requestType)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var requestTypeParameter = requestType != null ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPTCRequestQuestionsAnswered_Result>("CPTCRequestQuestionsAnswered", orderNoParameter, requestTypeParameter);
        }
    
        public virtual ObjectResult<CPGetSecurityFormControlsConfig_Result> CPGetSecurityFormControlsConfig(Nullable<int> applicationId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetSecurityFormControlsConfig_Result>("CPGetSecurityFormControlsConfig", applicationIdParameter);
        }
    
        public virtual ObjectResult<CPOrderSearch_Result> CPOrderSearch(string borrowerName, string loanNo, Nullable<int> orderNo, string loanOfficer, string transactionType, string orderStatus, Nullable<int> clientFilterVal, Nullable<int> clientId, Nullable<bool> showSubClients, Nullable<int> defaultPastDays)
        {
            var borrowerNameParameter = borrowerName != null ?
                new ObjectParameter("BorrowerName", borrowerName) :
                new ObjectParameter("BorrowerName", typeof(string));
    
            var loanNoParameter = loanNo != null ?
                new ObjectParameter("LoanNo", loanNo) :
                new ObjectParameter("LoanNo", typeof(string));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var loanOfficerParameter = loanOfficer != null ?
                new ObjectParameter("LoanOfficer", loanOfficer) :
                new ObjectParameter("LoanOfficer", typeof(string));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var orderStatusParameter = orderStatus != null ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(string));
    
            var clientFilterValParameter = clientFilterVal.HasValue ?
                new ObjectParameter("ClientFilterVal", clientFilterVal) :
                new ObjectParameter("ClientFilterVal", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var showSubClientsParameter = showSubClients.HasValue ?
                new ObjectParameter("ShowSubClients", showSubClients) :
                new ObjectParameter("ShowSubClients", typeof(bool));
    
            var defaultPastDaysParameter = defaultPastDays.HasValue ?
                new ObjectParameter("DefaultPastDays", defaultPastDays) :
                new ObjectParameter("DefaultPastDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPOrderSearch_Result>("CPOrderSearch", borrowerNameParameter, loanNoParameter, orderNoParameter, loanOfficerParameter, transactionTypeParameter, orderStatusParameter, clientFilterValParameter, clientIdParameter, showSubClientsParameter, defaultPastDaysParameter);
        }
    
        public virtual ObjectResult<CPGetPropertyDetail_Result> CPGetPropertyDetail(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPGetPropertyDetail_Result>("CPGetPropertyDetail", orderNoParameter);
        }
    }
}
